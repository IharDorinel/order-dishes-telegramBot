# –§—É–Ω–∫—Ü–∏–∏-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–æ–º–∞–Ω–¥ –∏ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫
import telebot

from database import menu
from telebot import types
import feedback as fb

basket = 0
API_TOKEN = 'YOUR TOKEN'

bot = telebot.TeleBot(API_TOKEN)

def start_markup():
    """Creates and returns the initial reply keyboard markup for the bot."""
    markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True, one_time_keyboard=True)
    markup.add('\U0001F4CB –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–µ–Ω—é', f'\U0001F6D2 –ö–æ—Ä–∑–∏–Ω–∞ ({str(basket)})',
               '\U0001F6F5 –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞')
    return markup


def feedback_markup():
    """Creates and returns the reply keyboard markup for feedback categories."""
    markup = types.ReplyKeyboardMarkup(row_width=2, one_time_keyboard=True, resize_keyboard=True)
    markup.add('–û —Å–µ—Ä–≤–∏—Å–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞', '–û –±–ª—é–¥–∞—Ö')
    return markup


def start_message(message, bot):
    msg = bot.send_message(message.chat.id,
                           f'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {message.from_user.first_name}! –Ø —á–∞—Ç-–±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑ –µ–¥—ã.',
                           reply_markup=start_markup())

    bot.register_next_step_handler(msg, lambda m: start_perform_actions(m, bot))


def feedback_message(message, bot):
    bot.send_message(
        message.chat.id,
        f'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {message.from_user.first_name}! –û—Å—Ç–∞–≤—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–∑—ã–≤ –æ –Ω–∞—à–µ–º —Å–µ—Ä–≤–∏—Å–µ, –≤—ã–±—Ä–∞–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–∏–∂–µ.',
        reply_markup=feedback_markup())
    bot.register_next_step_handler(message, lambda m: fb.choose_category(m, bot))


def support_message(message, bot):
    msg = bot.send_message(message.chat.id,
                           f'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {message.from_user.first_name}! –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.')


def category_markup():
    """Creates and returns the inline keyboard markup with categories."""
    markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
    categories = menu.categories()
    for emoji, name in categories:
        markup.add(types.KeyboardButton(f'{emoji} {name}'))
    markup.add(types.KeyboardButton('–ù–∞–∑–∞–¥ –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é'))  # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥ –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é"
    return markup


def items_markup(category_name):
    """Creates and returns the reply keyboard markup with items for the given category."""
    markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True, one_time_keyboard=False)
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –±–ª—é–¥ –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    items_list = menu.items_by_category(category_name)  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ —Ç–∞–∫–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ menu
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
    buttons = [f"{item_name}" for item_name in items_list]
    button1 = types.KeyboardButton('–ù–∞–∑–∞–¥ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏')
    markup.add(*buttons)
    markup.add(button1)
    return markup


def dish_markup(dish_id):
    print('dish_id', dish_id)
    """Creates and returns the inline keyboard markup with options for a dish."""
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton('–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É', callback_data=f'add_to_cart:{dish_id}'))
    markup.add(types.InlineKeyboardButton('–ü—Ä–æ—á–∏—Ç–∞—Ç—å –æ—Ç–∑—ã–≤', callback_data='read_review'))
    return markup

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–∞–Ω–Ω—ã—Ö
@bot.callback_query_handler(func=lambda call: call.data.startswith('add_to_cart'))
def handle_callback(call):
    print(call.data)
    dish_id = call.data.split(':')[1]
    add_to_order(call.message, dish_id)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–ª—é–¥–∞ –≤ –∑–∞–∫–∞–∑
def add_to_order(message, dish_id):
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:")
    bot.register_next_step_handler(message, lambda m: process_amount(m, dish_id))

def process_amount(message, dish_id):
    try:
        amount = int(message.text)
        bot.send_message(message.chat.id, f"–ë–ª—é–¥–æ {dish_id} –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–æ—Ä–∑–∏–Ω—É –≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ {amount}!")
    except ValueError:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ.")

def start_perform_actions(message, bot):
    if message.text == 'üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–µ–Ω—é':
        msg = bot.send_message(
            message.chat.id,
            f'{message.from_user.first_name}! –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é.',
            reply_markup=category_markup()
        )
        bot.register_next_step_handler(msg, lambda m: category_selected(m, bot))
    elif message.text.startswith('üõí –ö–æ—Ä–∑–∏–Ω–∞'):
        bot.send_message(message.chat.id, '–§—É–Ω–∫—Ü–∏—è –∫–æ—Ä–∑–∏–Ω–∞')
    elif message.text == '\U0001F6F5 –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞':
        bot.send_message(message.chat.id, '–§—É–Ω–∫—Ü–∏—è —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞')


def category_selected(message, bot):
    if message.text == '–ù–∞–∑–∞–¥ –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é':
        msg = bot.send_message(
            message.chat.id,
            reply_markup=start_message(message, bot)
        )
    else:
        category_name = message.text.split(' ', 1)[1]  # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏
        msg = bot.send_message(
            message.chat.id,
            f'–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: {category_name}. –í—ã–±–µ—Ä–∏—Ç–µ –±–ª—é–¥–æ:',
            reply_markup=items_markup(category_name)
        )
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥, –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
        bot.register_next_step_handler(msg, lambda m: dish_selected(m, bot))


def dish_selected(message, bot):
    if message.text == '–ù–∞–∑–∞–¥ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏':
        msg = bot.send_message(
            message.chat.id,
            f'{message.from_user.first_name}! –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é.',
            reply_markup=category_markup()
        )
        bot.register_next_step_handler(msg, lambda m: category_selected(m, bot))

    else:

        dish_name = message.text
        details = menu.dish_details(dish_name)

        if details:
            dish_id, description, price, image_url = details
            caption = f"{dish_name}\n\n{description}\n\n–¶–µ–Ω–∞: {price} —Ä—É–±."
            with open(image_url, 'rb') as photo:
                bot.send_photo(
                    message.chat.id,
                    photo=photo,
                    caption=caption,
                    reply_markup=dish_markup(dish_id)
                )
        bot.register_next_step_handler(message, lambda m: dish_selected(m, bot))
