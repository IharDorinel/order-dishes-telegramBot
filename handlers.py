# –§—É–Ω–∫—Ü–∏–∏-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–æ–º–∞–Ω–¥ –∏ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫
import telebot
from database import menu, user
from database.order import *
from telebot import types
import feedback as fb


# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω–µ
basket = 0


def start_message(message, bot):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤—ã–±—Ä–∞—Ç—å –¥–∞–ª—å–Ω–µ–π—à–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ.

    :param message: –æ–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :param bot: –æ–±—ä–µ–∫—Ç –±–æ—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    """
    msg = bot.send_message(
        message.chat.id,
        f'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {message.from_user.first_name}! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –≤—ã–±—Ä–∞—Ç—å –∏ '
        f'–∑–∞–∫–∞–∑–∞—Ç—å –ª—É—á—à–∏–µ –±–ª—é–¥–∞ –∏–∑ –Ω–∞—à–µ–≥–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞.',
        reply_markup=start_markup()
    )
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞
    bot.register_next_step_handler(msg, lambda m: start_perform_actions(m, bot))

def basket_message(message, bot):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º –∫–æ—Ä–∑–∏–Ω—ã.

    :param message: –æ–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :param bot: –æ–±—ä–µ–∫—Ç –±–æ—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    """
    msg = bot.send_message(
            message.chat.id,
            f'\U0001F6D2', reply_markup=start_markup())
    display_order(message, bot)
    bot.register_next_step_handler(msg, lambda m: start_perform_actions(m, bot))


def feedback_message(message, bot):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤.

    :param message: –æ–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :param bot: –æ–±—ä–µ–∫—Ç –±–æ—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    """
    user_id = message.from_user.id
    if user.user_exists(user_id):
        bot.send_message(
            message.chat.id,
            f'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {message.from_user.first_name}! –û—Å—Ç–∞–≤—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–∑—ã–≤ –æ –Ω–∞—à–µ–º —Å–µ—Ä–≤–∏—Å–µ, –≤—ã–±—Ä–∞–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–∏–∂–µ.',
            reply_markup=feedback_markup()
        )
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞
        bot.register_next_step_handler(message, lambda m: fb.choose_category(m, bot))
    else:

        bot.send_message(message.chat.id, '–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–ª—è—Ç—å –æ—Ç–∑—ã–≤ –µ—Å–ª–∏ –µ—à–µ –Ω–µ '
                                          '–ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å –Ω–∞—à–∏–º —Å–µ—Ä–≤–∏—Å–æ–º. –ú—ã –±—É–¥–µ–º —Ä–∞–¥—ã –µ—Å–ª–∏ –≤—ã '
                                          '–≤–æ—Å–ø–æ–ª—å–∑—É–µ—Ç–µ—Å—å –Ω–∞—à–∏–º —Å–µ—Ä–≤–∏—Å–æ–º.', reply_markup=start_markup())
        bot.register_next_step_handler(message, lambda m: start_perform_actions(m, bot))

def look_for_feedback(message, bot):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–∑—ã–≤—ã.

    :param message: –æ–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :param bot: –æ–±—ä–µ–∫—Ç –±–æ—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    """
    bot.send_message(
        message.chat.id,
        f'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {message.from_user.first_name}! –í–æ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ç–∑—ã–≤—ã, –æ —Å–µ—Ä–≤–∏—Å–∞—Ö —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞.',)

    fb.look_service_feedback(message, bot)
def support_message(message, bot):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.

    :param message: –æ–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :param bot: –æ–±—ä–µ–∫—Ç –±–æ—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    """
    bot.send_message(
        message.chat.id,
        f'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {message.from_user.first_name}! –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.'
    )


def feedback_markup():
    """
    –°–æ–∑–¥–∞–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–∞–∑–º–µ—Ç–∫—É –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏.

    :return: –æ–±—ä–µ–∫—Ç ReplyKeyboardMarkup
    """
    markup = types.ReplyKeyboardMarkup(row_width=2, one_time_keyboard=True, resize_keyboard=True)
    markup.add('–û —Å–µ—Ä–≤–∏—Å–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞', '–û –±–ª—é–¥–∞—Ö')
    return markup


def start_markup():
    """
    –°–æ–∑–¥–∞–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–∞–∑–º–µ—Ç–∫—É –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –º–µ–Ω—é.

    :return: –æ–±—ä–µ–∫—Ç ReplyKeyboardMarkup
    """
    markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True, one_time_keyboard=True)
    markup.add('\U0001F4CB –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–µ–Ω—é', f'\U0001F6D2 –ö–æ—Ä–∑–∏–Ω–∞ ({str(basket)})',
               '\U0001F6F5 –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞')
    return markup


def category_markup():
    """
    –°–æ–∑–¥–∞–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–∞–∑–º–µ—Ç–∫—É –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ –º–µ–Ω—é.

    :return: –æ–±—ä–µ–∫—Ç ReplyKeyboardMarkup
    """
    categories = menu.categories()
    markup = types.ReplyKeyboardMarkup(row_width=2, one_time_keyboard=True, resize_keyboard=True)
    buttons = [f'{emoji} {name}' for emoji, name in categories]
    button1 = types.KeyboardButton('–ù–∞–∑–∞–¥ –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é')
    markup.add(*buttons)
    markup.add(button1)  # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥ –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é"
    return markup


def items_markup(category_name):
    """
    –°–æ–∑–¥–∞–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–∞–∑–º–µ—Ç–∫—É –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ –º–µ–Ω—é –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.

    :param category_name: –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    :return: –æ–±—ä–µ–∫—Ç ReplyKeyboardMarkup
    """
    markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True, one_time_keyboard=False)
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –±–ª—é–¥ –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    items_list = menu.items_by_category(category_name)  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ —Ç–∞–∫–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ menu
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
    buttons = [f"{item_name}" for item_name in items_list]
    button1 = types.KeyboardButton('–ù–∞–∑–∞–¥ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏')
    markup.add(*buttons)
    markup.add(button1)
    return markup


def dish_markup(message, dish_id):
    print('dish_id', dish_id)
    """Creates and returns the inline keyboard markup with options for a dish."""
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton('–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É', callback_data=f"add_to_cart:{dish_id}"))
    markup.add(types.InlineKeyboardButton('–ü—Ä–æ—á–∏—Ç–∞—Ç—å –æ—Ç–∑—ã–≤', callback_data=f'read_review:{message.text}'))
    return markup


def command_message(message, bot):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤—ã–∑—ã–≤–∞–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏.

    :param message: –æ–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :param bot: –æ–±—ä–µ–∫—Ç –±–æ—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    """
    commands = {
        '/feedback': feedback_message,
        '/basket': basket_message,
        '/support': support_message,
        '/look_feedback':look_for_feedback,
        '/start': start_message
    }
    if message.text in commands:
        commands[message.text](message, bot)


def start_perform_actions(message, bot):
    if message.text == 'üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–µ–Ω—é':
        msg = bot.send_message(
            message.chat.id,
            f'{message.from_user.first_name}! –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é.',
            reply_markup=category_markup()
        )
        bot.register_next_step_handler(msg, lambda m: category_selected(m, bot))
    elif message.text.startswith('üõí –ö–æ—Ä–∑–∏–Ω–∞'):
        basket_message(message, bot)

    elif message.text == '\U0001F6F5 –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞':
        bot.send_message(message.chat.id, '–§—É–Ω–∫—Ü–∏—è —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞')

    else:
        if message.text in ['/start', '/basket', '/feedback','/look_feedback', '/support']:
            command_message(message, bot)




def category_selected(message, bot):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.

    :param message: –æ–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :param bot: –æ–±—ä–µ–∫—Ç –±–æ—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    """
    try:
        if message.text == '–ù–∞–∑–∞–¥ –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é':
            msg = bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–ª—å–Ω–µ–∏ÃÜ—à–µ–µ –¥–µ–∏ÃÜ—Å—Ç–≤–∏–µ:', reply_markup=start_markup())
            bot.register_next_step_handler(msg, lambda m: start_perform_actions(m, bot))
        else:
            category_name = message.text.split(' ', 1)[1]  # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏
            msg = bot.send_message(
                message.chat.id,
                f'–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: {category_name}. –í—ã–±–µ—Ä–∏—Ç–µ –±–ª—é–¥–æ:',
                reply_markup=items_markup(category_name)
            )
            bot.register_next_step_handler(msg, lambda m: dish_selected(m, bot))
    except (IndexError, ValueError):
        if message.text in ['/start','/basket', '/feedback','/look_feedback', '/support']:
            command_message(message, bot)
        else:
            bot.send_message(message.chat.id, '–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞.', reply_markup=start_markup())
            bot.register_next_step_handler(message, lambda m: start_perform_actions(m, bot))


def dish_selected(message, bot):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –±–ª—é–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.

    :param message: –æ–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :param bot: –æ–±—ä–µ–∫—Ç –±–æ—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    """
    user_id = message.from_user.id

    if message.text == '–ù–∞–∑–∞–¥ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏':
        msg = bot.send_message(
            message.chat.id,
            f'{message.from_user.first_name}! –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é.',
            reply_markup=category_markup()
        )
        bot.register_next_step_handler(msg, lambda m: category_selected(m, bot))

    elif message.text in ['/start','/basket', '/feedback','/look_feedback', '/support']:
        command_message(message, bot)

    else:
        dish_name = message.text
        details = menu.dish_details(dish_name)
        if details:
            dish_id, description, price, image_url = details
            caption = f"{dish_name}\n\n{description}\n\n–¶–µ–Ω–∞: {price} —Ä—É–±."

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ
            with open(image_url, 'rb') as photo:
                msg = bot.send_photo(
                    message.chat.id,
                    photo=photo,
                    caption=caption,
                    reply_markup=dish_markup(message, dish_id)
                )
        bot.register_next_step_handler(message, lambda m: dish_selected(m, bot))


def add_to_order(message, dish_id, order, bot):
    for position in order.positions:
        if position.dish_id == dish_id:
            bot.send_message(message.chat.id, "–ë–ª—é–¥–æ —É–∂–µ –µ—Å—Ç—å –≤ –∑–∞–∫–∞–∑–µ. –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ –∫–æ—Ä–∑–∏–Ω–µ.")
            return
    #bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:")

    #bot.register_next_step_handler(message, lambda m: process_amount(m, dish_id, order, bot))
    process_amount(message, dish_id, order, bot)
def process_amount(message, dish_id, order, bot):
    db = Database('EasyEats.db')
    try:
        #amount = int(message.text)
        amount = 1
        if amount <= 0:
            raise ValueError("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è.")
        #menu_item = db.cursor.execute("SELECT price FROM menu WHERE dish_id = ?", (dish_id,)).fetchone()
        menu_item = db.get_dish(dish_id)
        if menu_item:
            price = menu_item[4]
            name = menu_item[2]
            #db.add_order_position(order.order_id, dish_id, price, amount)
            position = Position(dish_id, amount, price)
            order.add_position(position)
            bot.send_message(message.chat.id, f"–ë–ª—é–¥–æ {name} –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–æ—Ä–∑–∏–Ω—É.")
            #####
            #show_order(message, bot, order)
            #####
        else:
            bot.send_message(message.chat.id, "–ë–ª—é–¥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
    except ValueError:
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ.")


def order_markup(order):
    """Creates and returns the inline keyboard markup with options for a cart."""
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton('–£–¥–∞–ª–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é', callback_data="delete_position"))
    markup.add(types.InlineKeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ –ø–æ–∑–∏—Ü–∏–∏', callback_data="change_position"))
    markup.add(types.InlineKeyboardButton('–û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É', callback_data='clear_cart'))
    markup.add(types.InlineKeyboardButton('–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑', callback_data='checkout'))
    return markup

def basket_markup(order):
    db = Database('EasyEats.db')
    ind = 0
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    for order in order.positions:
        menu_item = db.get_dish(order.dish_id)
        dish_name = menu_item[2]
        ind += 1
        print(order.dish_id)
        markup.add(f'{ind}. {dish_name}')
    return markup

def change_markup():
    markup = fb.feedback_score_markup()
    button = ['–î—Ä—É–≥–æ–µ —á–∏—Å–ª–æ']
    markup.add(*button)
    return markup
def show_order(message, bot, order):
    db = Database('EasyEats.db')

    if not order.positions:
        bot.send_message(message.chat.id, "–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.")
    else:
        order_details = ""
        ind = 0
        for item in order.positions:
            menu_item = db.get_dish(item.dish_id)
            dish_name = menu_item[2]
            ind += 1
            # dish_name = db.cursor.execute("SELECT dish_name FROM menu WHERE dish_id = ?", (dish_id,)).fetchone()
            order_details += f"{ind}. {dish_name} x{item.amount} - {item.price} —Ä—É–±. –∑–∞ —à—Ç. (–ò—Ç–æ–≥–æ: {item.total_price} —Ä—É–±.)\n"
        order_details += f"\n–û–±—â–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞: {order.total_price} —Ä—É–±."
        bot.send_message(message.chat.id, order_details, reply_markup=order_markup(order))
    db.close()


def process_delete(message, bot, order):
    try:
        pos_id = int(message.text[0])
        print(pos_id)

        # user_id = message.from_user.id
        # order = user_data[user_id]['order']
        pos_for_delete = order.positions[pos_id-1]

        order.remove_position(pos_for_delete)
        #db.delete_order_position(pos_id)
        bot.send_message(message.chat.id, "–ü–æ–∑–∏—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –∑–∞–∫–∞–∑–∞.", reply_markup=start_markup())
        display_order(message, bot)
        bot.register_next_step_handler(message, lambda m: start_perform_actions(m, bot))

    except ValueError:
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ‚Ññ –ø–æ–∑–∏—Ü–∏–∏.")


    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /confirm –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
    @bot.message_handler(commands=['confirm'])
    def confirm_order(message):
        bot.send_message(message.chat.id, "–í–∞—à –∑–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω. –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!")

def process_change(message, bot, order):
    try:
        pos_id = int(message.text[0])
        pos_for_change = order.positions[pos_id-1]
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–µ—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:", reply_markup=change_markup())
        bot.register_next_step_handler(message, lambda m: process_change_amount(m, bot, order, pos_for_change))

    except ValueError:
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ‚Ññ –ø–æ–∑–∏—Ü–∏–∏.")

def process_change_amount(message, bot, order, position):
    db = Database('EasyEats.db')
    try:
        if message.text.strip().lower() == "–¥—Ä—É–≥–æ–µ —á–∏—Å–ª–æ":
            bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ.")
            bot.register_next_step_handler(message, lambda m: process_change_amount(m, bot, order, position))
        else:
            amount = int(message.text.strip())
            if amount <= 0:
                raise ValueError("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è.")
            position.change_amount(amount)
            order.recalculate_total_price()
            bot.send_message(message.chat.id, "–ü–æ–∑–∏—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∞.", reply_markup=start_markup())
            display_order(message, bot)
            bot.register_next_step_handler(message, lambda m: start_perform_actions(m, bot))
    except ValueError:
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ.")
    except Exception as e:
        bot.send_message(message.chat.id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")


def display_order(message, bot):
    try:
        user_id = message.from_user.id
        order = user_data[user_id]['order']
        show_order(message, bot, order)
    except KeyError:
        bot.send_message(message.chat.id, "–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.")