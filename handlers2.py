from telebot import types
import menu

def start_markup():
    """Creates and returns the main menu keyboard markup."""
    markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
    markup.add(types.KeyboardButton('üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–µ–Ω—é'))
    markup.add(types.KeyboardButton('üõí –ö–æ—Ä–∑–∏–Ω–∞'))
    markup.add(types.KeyboardButton('üõçÔ∏è –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞'))
    return markup

def category_markup():
    """Creates and returns the inline keyboard markup with categories."""
    markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
    categories = menu.categories()
    for emoji, name in categories:
        markup.add(types.KeyboardButton(f'{emoji} {name}'))
    markup.add(types.KeyboardButton('–ù–∞–∑–∞–¥ –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é'))  # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥ –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é"
    return markup

def items_markup(category_name):
    """Creates and returns the inline keyboard markup with items for a given category."""
    markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
    items = menu.items_by_category(category_name)
    for item in items:
        markup.add(types.KeyboardButton(item))
    markup.add(types.KeyboardButton('–ù–∞–∑–∞–¥ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏'))
    return markup

def dish_markup():
    """Creates and returns the inline keyboard markup with options for a dish."""
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton('–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É', callback_data='add_to_cart'))
    markup.add(types.InlineKeyboardButton('–ü—Ä–æ—á–∏—Ç–∞—Ç—å –æ—Ç–∑—ã–≤', callback_data='read_review'))
    return markup

def start_perform_actions(message, bot):
    msg = bot.send_message(
        message.chat.id,
        f'{message.from_user.first_name}! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
        reply_markup=start_markup()
    )
    bot.register_next_step_handler(msg, handle_main_menu)

def handle_main_menu(message, bot):
    if message.text == 'üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–µ–Ω—é':
        msg = bot.send_message(
            message.chat.id,
            f'{message.from_user.first_name}! –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é.',
            reply_markup=category_markup()
        )
        bot.register_next_step_handler(msg, lambda m: category_selected(m, bot)
                                       )
        elif message.text.startswith('üõí –ö–æ—Ä–∑–∏–Ω–∞'):
        bot.send_message(message.chat.id, '–§—É–Ω–∫—Ü–∏—è –∫–æ—Ä–∑–∏–Ω–∞')
    elif message.text == 'üõçÔ∏è –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞':
        bot.send_message(message.chat.id, '–§—É–Ω–∫—Ü–∏—è —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞')


def category_selected(message, bot):
    if message.text == '–ù–∞–∑–∞–¥ –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é':
        start_perform_actions(message, bot)
    else:
        category_name = message.text.split(' ', 1)[1]  # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏
        msg = bot.send_message(
            message.chat.id,
            f'–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: {category_name}. –í—ã–±–µ—Ä–∏—Ç–µ –±–ª—é–¥–æ:',
            reply_markup=items_markup(category_name)
        )
        bot.register_next_step_handler(msg, lambda m: dish_selected(m, bot))


def dish_selected(message, bot):
    if message.text == '–ù–∞–∑–∞–¥ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏':
        msg = bot.send_message(
            message.chat.id,
            f'{message.from_user.first_name}! –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é.',
            reply_markup=category_markup()
        )
        bot.register_next_step_handler(msg, lambda m: category_selected(m, bot))
    else:
        dish_name = message.text
        details = menu.dish_details(dish_name)
        if details:
            description, price, image_url = details
            caption = f"{dish_name}\n\n{description}\n\n–¶–µ–Ω–∞: {price} —Ä—É–±."
            with open(image_url, 'rb') as photo:
                bot.send_photo(
                    message.chat.id,
                    photo=photo,
                    caption=caption,
                    reply_markup=dish_markup()
                )
        bot.register_next_step_handler(message, lambda m: dish_selected(m, bot))

