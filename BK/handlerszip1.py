from telebot import types
from database import menu  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å –º–æ–¥—É–ª—å menu –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–µ–Ω—é
import stripe

# –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤–∞—à —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á Stripe
stripe.api_key = 'your_secret_key'

def process_payment(user_id, order_id, card_number, exp_month, exp_year, cvc, amount):
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–ø–ª–∞—Ç—ã –∑–∞–∫–∞–∑–∞ –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç–æ–π.

    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
    user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    order_id: ID –∑–∞–∫–∞–∑–∞
    card_number: –ù–æ–º–µ—Ä –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç—ã
    exp_month: –ú–µ—Å—è—Ü –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è –∫–∞—Ä—Ç—ã (MM)
    exp_year: –ì–æ–¥ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è –∫–∞—Ä—Ç—ã (YYYY)
    cvc: CVC –∫–æ–¥ –∫–∞—Ä—Ç—ã
    amount: –°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ –≤ –∫–æ–ø–µ–π–∫–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1000 –∫–æ–ø–µ–µ–∫ = 10 —Ä—É–±–ª–µ–π)
    """
    try:
        # –°–æ–∑–¥–∞–µ–º —Ç–æ–∫–µ–Ω –∫–∞—Ä—Ç—ã
        token = stripe.Token.create(
            card={
                "number": card_number,
                "exp_month": exp_month,
                "exp_year": exp_year,
                "cvc": cvc,
            },
        )

        # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂
        charge = stripe.Charge.create(
            amount=amount,  # –°—É–º–º–∞ –≤ –∫–æ–ø–µ–π–∫–∞—Ö
            currency="rub",
            description=f"Order {order_id} payment by user {user_id}",
            source=token.id,
        )

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ
        return {"status": "success", "charge_id": charge.id, "amount": charge.amount}
    except stripe.error.CardError as e:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∫–∞—Ä—Ç—ã
        return {"status": "error", "message": str(e)}
    except Exception as e:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫
        return {"status": "error", "message": "An error occurred. Please try again later."}
# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
user_id = "example_user_id"
order_id = "example_order_id"
card_number = "4242424242424242"  # –¢–µ—Å—Ç–æ–≤—ã–π –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã Stripe
exp_month = 12
exp_year = 2024
cvc = "123"
amount = 1000  # 1000 –∫–æ–ø–µ–µ–∫ = 10 —Ä—É–±–ª–µ–π

result = process_payment(user_id, order_id, card_number, exp_month, exp_year, cvc, amount)
print(result)



basket = 0

def start_markup():
    """Creates and returns the initial reply keyboard markup for the bot."""
    markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True, one_time_keyboard=True)
    markup.add('\U0001F4CB –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–µ–Ω—é', f'\U0001F6D2 –ö–æ—Ä–∑–∏–Ω–∞ ({str(basket)})',
               '\U0001F6F5 –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞', '–í–≤–µ—Å—Ç–∏ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏', '–û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞')
    return markup


def start_message(message, bot):
    msg = bot.send_message(message.chat.id,
                           f'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {message.from_user.first_name}! –Ø —á–∞—Ç-–±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑ –µ–¥—ã.',
                           reply_markup=start_markup())

    bot.register_next_step_handler(msg, lambda m: start_perform_actions(m, bot))


def feedback_message(message, bot):
    bot.send_message(message.chat.id,
                     f'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {message.from_user.first_name}! –û—Å—Ç–∞–≤—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–∑—ã–≤ –æ –Ω–∞—à–µ–º —Å–µ—Ä–≤–∏—Å–µ.')


def support_message(message, bot):
    bot.send_message(message.chat.id,
                     f'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {message.from_user.first_name}! –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.')


def category_markup():
    """Creates and returns the inline keyboard markup with categories."""
    markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
    categories = menu.categories()
    for emoji, name in categories:
        markup.add(types.KeyboardButton(f'{emoji} {name}'))
    markup.add(types.KeyboardButton('–ù–∞–∑–∞–¥ –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é'))  # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥ –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é"
    return markup


def items_markup(category_name):
    """Creates and returns the reply keyboard markup with items for the given category."""
    markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True, one_time_keyboard=False)
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –±–ª—é–¥ –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    items_list = menu.items_by_category(category_name)  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ —Ç–∞–∫–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ menu
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
    buttons = [f"{item_name}" for item_name in items_list]
    button1 = types.KeyboardButton('–ù–∞–∑–∞–¥ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏')
    markup.add(*buttons)
    markup.add(button1)
    return markup


def dish_markup():
    """Creates and returns the inline keyboard markup with options for a dish."""
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton('–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É', callback_data='add_to_cart'))
    markup.add(types.InlineKeyboardButton('–ü—Ä–æ—á–∏—Ç–∞—Ç—å –æ—Ç–∑—ã–≤', callback_data='read_review'))
    return markup


def start_perform_actions(message, bot):
    if message.text == 'üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–µ–Ω—é':
        msg = bot.send_message(
            message.chat.id,
            f'{message.from_user.first_name}! –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é.',
            reply_markup=category_markup()
        )
        bot.register_next_step_handler(msg, lambda m: category_selected(m, bot))
    elif message.text.startswith('üõí –ö–æ—Ä–∑–∏–Ω–∞'):
        bot.send_message(message.chat.id, '–§—É–Ω–∫—Ü–∏—è –∫–æ—Ä–∑–∏–Ω–∞')
    elif message.text == '\U0001F6F5 –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞':
        bot.send_message(message.chat.id, '–§—É–Ω–∫—Ü–∏—è —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞')
    elif message.text == '–í–≤–µ—Å—Ç–∏ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏':
        request_address(message, bot)


def category_selected(message, bot):
    if message.text == '–ù–∞–∑–∞–¥ –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é':
        start_message(message, bot)
    else:
        category_name = message.text.split(' ', 1)[1]  # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏
        msg = bot.send_message(
            message.chat.id,
            f'–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: {category_name}. –í—ã–±–µ—Ä–∏—Ç–µ –±–ª—é–¥–æ:',
            reply_markup=items_markup(category_name)
        )
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥, –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
        bot.register_next_step_handler(msg, lambda m: dish_selected(m, bot))


def dish_selected(message, bot):
    if message.text == '–ù–∞–∑–∞–¥ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏':
        msg = bot.send_message(
            message.chat.id,
            f'{message.from_user.first_name}! –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é.',
            reply_markup=category_markup()
        )
        bot.register_next_step_handler(msg, lambda m: category_selected(m, bot))
    else:
        dish_name = message.text
        details = menu.dish_details(dish_name)

        if details:
            description, price, image_url = details
            caption = f"{dish_name}\n\n{description}\n\n–¶–µ–Ω–∞: {price} —Ä—É–±."
            with open(image_url, 'rb') as photo:
                bot.send_photo(
                    message.chat.id,
                    photo=photo,
                    caption=caption,
                    reply_markup=dish_markup()
                )
        bot.register_next_step_handler(message, lambda m: dish_selected(m, bot))


def address_markup():
    """Creates and returns the inline keyboard markup for entering the delivery address."""
    markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
    markup.add(types.KeyboardButton('–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏'))
    return markup


def request_address(message, bot):
    """Function to request delivery address from the user."""
    msg = bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ –∑–∞–∫–∞–∑–∞:", reply_markup=address_markup())
    bot.register_next_step_handler(msg, lambda m: save_address(m, bot))


def save_address(message, bot):
    """Function to save user's delivery address."""
    user_id = message.from_user.id
    address = message.text
    # –í —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∞–¥—Ä–µ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –∫–∞–∫-—Ç–æ –µ—â–µ –µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å
    bot.send_message(message.chat.id, f"–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {address}")

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É "–í–æ–∑–≤—Ä–∞—Ç –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é"
    markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
    btn_main_menu = types.KeyboardButton('–í–æ–∑–≤—Ä–∞—Ç –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é')
    markup.add(btn_main_menu)

    bot.send_message(message.chat.id, "–í—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=markup)


def process_payment(user_id, order_id, card_number, exp_month, exp_year, cvc, amount):
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–ø–ª–∞—Ç—ã –∑–∞–∫–∞–∑–∞ –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç–æ–π.

    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
    user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    order_id: ID –∑–∞–∫–∞–∑–∞
    card_number: –ù–æ–º–µ—Ä –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç—ã
    exp_month: –ú–µ—Å—è—Ü –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è –∫–∞—Ä—Ç—ã (MM)
    exp_year: –ì–æ–¥ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è –∫–∞—Ä—Ç—ã (YYYY)
    cvc: CVC –∫–æ–¥ –∫–∞—Ä—Ç—ã
    amount: –°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ –≤ –∫–æ–ø–µ–π–∫–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1000 –∫–æ–ø–µ–µ–∫ = 10 —Ä—É–±–ª–µ–π)
    """
    try:
        # –°–æ–∑–¥–∞–µ–º —Ç–æ–∫–µ–Ω –∫–∞—Ä—Ç—ã
        token = stripe.Token.create(
            card={
                "number": card_number,
                "exp_month": exp_month,
                "exp_year": exp_year,
                "cvc": cvc,
            },
        )

        # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂
        charge = stripe.Charge.create(
            amount=amount,  # –°—É–º–º–∞ –≤ –∫–æ–ø–µ–π–∫–∞—Ö
            currency="rub",
            description=f"Order {order_id} payment by user {user_id}",
            source=token.id,
        )

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ
        return {"status": "success", "charge_id": charge.id, "amount": charge.amount}
    except stripe.error.CardError as e:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∫–∞—Ä—Ç—ã
        return {"status": "error", "message": str(e)}
    except Exception as e:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫
        return {"status": "error", "message": "An error occurred. Please try again later."}
# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
user_id = "example_user_id"
order_id = "example_order_id"
card_number = "4242424242424242"  # –¢–µ—Å—Ç–æ–≤—ã–π –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã Stripe
exp_month = 12
exp_year = 2024
cvc = "123"
amount = 1000  # 1000 –∫–æ–ø–µ–µ–∫ = 10 —Ä—É–±–ª–µ–π

result = process_payment(user_id, order_id, card_number, exp_month, exp_year, cvc, amount)
print(result)



